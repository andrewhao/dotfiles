"" Custom vimrc

"" Set default spacing prefs.
set tabstop=2 shiftwidth=2 expandtab

"" Comma is leader.
let mapleader = ","

set wildignore+=*node_modules/*,*_build/*,*deps/*
autocmd FileType vim setlocal keywordprg=:help
autocmd FileType ruby setlocal keywordprg=ri

map <leader>cn :cnext<cr>
map <leader>cp :cprev<cr>
map <leader>co :copen<cr>
map <leader>cc :ccl<cr>

"" Over-ride: Ctrl-p opens FZF
map <C-p> :FZF<cr>

nmap fw :grep -r <cword> . <cr>

autocmd FileType ruby nmap <buffer> <leader>sc :cexpr system('ruby -c ' . bufname("%"))<cr>
autocmd FileType ruby nmap <buffer> <leader>li :cexpr system('rubocop ' . bufname("%"))<cr>

set tags=.ctags;$HOME
nmap <leader>tt :execute "!ctags -R --exclude=@/Users/andrewhao/.ctagsignore -f ./.ctags ."<cr>
nmap gd <C-]>
nmap gb <C-t>

"" Easymotion
"map <Leader> <Plug>(easymotion-prefix)
"map <Leader>/ <Plug>(easymotion-sn)
"omap <Leader>/ <Plug>(easymotion-tn)
"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)

let g:EasyMotion_use_smartsign_us = 1 " US layout

"" vim-airline
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

"" vim-wheel
let g:wheel#map#up   = '<C-K>'
let g:wheel#map#down = '<C-J>'
let g:wheel#map#mouse = 1

"" enable the mouse
set mouse=a
set ttymouse=xterm2

"" Smash escape. Eh... I actually kind of hate it.. Eh... I actually kind of hate it.
"" inoremap jk <Esc>
"" inoremap kj <Esc>

"" Powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

"" Nice powerline defaults
let laststatus=2 " Always display the statusline in all windows
" set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Remap ctrlp to ctrl-t
let g:ctrlp_map = '<C-t>'

" Run the current file with rspec
" map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>

" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :call VimuxZoomRunner()<CR>

" Syntastic customizations
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_coffee_checkers = ['coffeelint']

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']

let g:syntastic_error_symbol = '‚ùå'
let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
let g:syntastic_warning_symbol = '‚ö†Ô∏è'
let g:syntastic_style_warning_symbol = 'üí©'

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" Use ag for vim-ack
" https://github.com/mileszs/ack.vim#can-i-use-ag-the-silver-searcher-with-this
let g:ackprg = 'ag --vimgrep'

" persistent undo
if has('persistent_undo')
  set undodir=$HOME/.undo
  set undofile
endif

" Never get smaller than 80 chars
set winwidth=80

" System clipboard sharing
set clipboard=unnamed

" vim-test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

let test#strategy = "vimux"
